SELECT REPLIES, UPVOTE, DOWNVOTE, C.CONTENT_ID, C.TEXT, C.POSTED_AT, C.ROLE_ID, P2.FIRST_NAME || ' ' || p2.LAST_NAME, G.GROUP_ID, G.NAME, Voted.DOWN FROM
(SELECT COM1.CONTENT_ID,
       COUNT(COM2.CONTENT_ID)             as REPLIES,
       COUNT(V.ROLE_ID)                   AS UPVOTE,
       COUNT(V2.ROLE_ID)                  as DOWNVOTE
FROM COMMENT_ COM1
         JOIN CONTENT CON1 ON COM1.CONTENT_ID = CON1.CONTENT_ID
         LEFT OUTER JOIN COMMENT_ COM2 ON COM2.COMMENT_OF = CON1.CONTENT_ID
         LEFT OUTER JOIN VOTE V ON V.CONTENT_ID = COM1.CONTENT_ID AND V.DOWN = 'N'
         LEFT OUTER JOIN VOTE V2 ON V2.CONTENT_ID = COM1.CONTENT_ID AND V2.DOWN != 'N'
WHERE COM1.COMMENT_OF = :cId
GROUP BY COM1.CONTENT_ID) CONTENT_IDS

JOIN CONTENT C ON C.CONTENT_ID = CONTENT_IDS.CONTENT_ID
JOIN COMMENT_ COMM ON COMM.CONTENT_ID = C.CONTENT_ID
JOIN PGROUP G ON G.GROUP_ID = C.GROUP_ID
JOIN ACADEMIC_ROLE AR on C.ROLE_ID = AR.ROLE_ID
JOIN PERSON P2 on AR.PERSON_ID = P2.PERSON_ID
LEFT OUTER JOIN VOTE VOTED ON VOTED.ROLE_ID = :rId AND VOTED.CONTENT_ID = C.CONTENT_ID;


 SELECT C.CONTENT_ID, C.TEXT,P.TITLE, C.POSTED_AT, G.GROUP_ID, G.NAME as GROUP_NAME,
            COMMENT_COUNT, UPVOTE_COUNT, DOWNVOTE_COUNT, P2.FIRST_NAME || ' ' || p2.LAST_NAME as POSTED_BY, VOTED.DOWN as DOWNVOTE
            FROM
            (
            SELECT C.CONTENT_ID, COUNT(UNIQUE CMT.CONTENT_ID) as COMMENT_COUNT,
                COUNT(UNIQUE VU.ROLE_ID) as UPVOTE_COUNT,
                COUNT(UNIQUE  VD.ROLE_ID) as DOWNVOTE_COUNT
            FROM GROUP_MEMBER GM
            JOIN PGROUP G on GM.GROUP_ID = G.GROUP_ID
            JOIN CONTENT C ON C.GROUP_ID = G.GROUP_ID
            JOIN POST P ON P.CONTENT_ID = C.CONTENT_ID
            LEFT OUTER JOIN COMMENT_ CMT ON CMT.COMMENT_OF = P.CONTENT_ID
            LEFT OUTER JOIN VOTE VU ON VU.CONTENT_ID = C.CONTENT_ID AND VU.DOWN = 'N'
            LEFT OUTER JOIN VOTE VD ON VD.CONTENT_ID = C.CONTENT_ID AND VD.DOWN = 'Y'

            WHERE GM.ROLE_ID = :rId
            GROUP BY C.CONTENT_ID, C.POSTED_AT
            ORDER BY C.POSTED_AT
            FETCH NEXT 25 ROW ONLY
            ) CONTENT_IDS
            JOIN CONTENT C ON C.CONTENT_ID = CONTENT_IDS.CONTENT_ID
            JOIN POST P ON P.CONTENT_ID = C.CONTENT_ID
            JOIN PGROUP G ON G.GROUP_ID = C.GROUP_ID
            JOIN ACADEMIC_ROLE AR on C.ROLE_ID = AR.ROLE_ID
            JOIN PERSON P2 on AR.PERSON_ID = P2.PERSON_ID
            LEFT OUTER JOIN VOTE VOTED ON VOTED.ROLE_ID = :rId AND VOTED.CONTENT_ID = C.CONTENT_ID;


;


            INSERT INTO JOIN_GROUP_REQUEST(GROUP_ID, REQUEST_FROM, REQUEST_TO)
            SELECT :a, :b, :c FROM DUAL WHERE NOT EXISTS((SELECT GROUP_ID FROM GROUP_MEMBER WHERE GROUP_ID = :a AND ROLE_ID = :c) UNION
            (SELECT GROUP_ID FROM PGROUP WHERE GROUP_ID = :a AND USER_CREATED = 'N'))

;

INSERT INTO GROUP_MEMBER(GROUP_ID, ROLE_ID, MEMBER_ROLE) SELECT GROUP_ID, REQUEST_TO, 'mem' FROM JOIN_GROUP_REQUEST WHERE REQUEST_ID = :id;
DELETE FROM JOIN_GROUP_REQUEST WHERE GROUP_ID = (SELECT GROUP_ID FROM JOIN_GROUP_REQUEST WHERE REQUEST_TO = :id) AND
                                     REQUEST_TO = (SELECT REQUEST_TO FROM JOIN_GROUP_REQUEST WHERE REQUEST_TO = :id);


SELECT R.REQUEST_TO, G.GROUP_ID, G.NAME as GROUP_NAME, REQ_FROM.ROLE_ID,
       P.FIRST_NAME || ' ' || P.LAST_NAME as REQUEST_FROM_USER_NAME,
        DS.NAME AS STUDENT_DEPARTMENT_NAME, US.NAME as STUDENT_UNIVERSITY_NAME,
        DT.NAME AS TEACHER_DEPARTMENT_NAME, UT.NAME as TEACHER_UNIVERSITY_NAME

FROM JOIN_GROUP_REQUEST R
JOIN PGROUP G ON G.GROUP_ID = R.GROUP_ID
JOIN ACADEMIC_ROLE REQ_FROM on R.REQUEST_FROM = REQ_FROM.ROLE_ID
JOIN PERSON P ON P.PERSON_ID = REQ_FROM.PERSON_ID
LEFT OUTER JOIN STUDENT S ON S.ROLE_ID = REQ_FROM.ROLE_ID
LEFT OUTER JOIN TEACHER T on REQ_FROM.ROLE_ID = T.ROLE_ID
LEFT OUTER JOIN DEPARTMENT DS ON DS.DEPARTMENT_ID = S.DEPARTMENT_ID
LEFT OUTER JOIN DEPARTMENT DT ON DT.DEPARTMENT_ID = T.DEPARTMENT_ID
LEFT OUTER JOIN UNIVERSITY US ON US.UNIVERSITY_ID = DS.UNIVERSITY_ID
LEFT OUTER JOIN UNIVERSITY UT ON UT.UNIVERSITY_ID = DT.UNIVERSITY_ID
WHERE R.REQUEST_TO = 3400;


BEGIN

    INSERT INTO GROUP_MEMBER(GROUP_ID, ROLE_ID, MEMBER_ROLE)
    SELECT GROUP_ID, REQUEST_TO, 'mem' FROM JOIN_GROUP_REQUEST WHERE REQUEST_ID = :id AND REQUEST_TO = :rId;
    DELETE FROM JOIN_GROUP_REQUEST WHERE GROUP_ID = (SELECT GROUP_ID FROM JOIN_GROUP_REQUEST WHERE REQUEST_TO = :id AND REQUEST_TO = :rId)
    AND
    REQUEST_TO = (SELECT REQUEST_TO FROM JOIN_GROUP_REQUEST WHERE REQUEST_TO = :id AND REQUEST_TO = :rId);
END;

DECLARE
    r TEACHER%rowtype;
    d Number;
BEGIN
    SELECT COUNT(*) INTO d FROM DEPARTMENT WHERE DEPARTMENT_ID = :dId AND UNIVERSITY_ID = (SELECT UNIVERSITY_ID FROM MANAGEMENT WHERE MANAGEMENT_ID = :mId);
    IF d = 0 THEN
        RAISE_APPLICATION_ERROR(-20999,'Unauthorized');
    end if;
    r := CREATE_TEACHER(null, :pass, :hash, :rank, :dId);
end;

SELECT * FROM PERSON WHERE  PERSON_ID = 23773;

SELECT * FROM ACADEMIC_ROLE WHERE ROLE_ID = :rID;

UPDATE ACADEMIC_ROLE SET PERSON_ID = :pId WHERE ROLE_ID = :rId;